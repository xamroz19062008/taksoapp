from django.contrib.auth.models import AbstractUser
from django.db import models
from django.core.exceptions import ValidationError

# üë§ –ö–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(AbstractUser):
    phone = models.CharField(max_length=20)
    is_driver = models.BooleanField(default=False)
    car_model = models.CharField(max_length=50, blank=True)
    has_ac = models.BooleanField(default=False)
    hide_phone = models.BooleanField(default=False)
    show_phone = models.BooleanField(default=True)

    gender = models.CharField(
        max_length=10,
        choices=[('male', '–ú—É–∂—á–∏–Ω–∞'), ('female', '–ñ–µ–Ω—â–∏–Ω–∞')],
        null=True,
        blank=True,
    )

    def clean(self):
        # ‚ùó –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –¥–µ–≤—É—à–µ–∫ –≤ —Ä–æ–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è
        if self.is_driver and self.gender == 'female':
            raise ValidationError("–¢–∞–∫—Å–∏—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∂–µ–Ω—â–∏–Ω–æ–π –≤ —ç—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")

    def save(self, *args, **kwargs):
        self.clean()
        super().save(*args, **kwargs)

    def __str__(self):
        return self.username

# üöï –ü–æ–µ–∑–¥–∫–∞
class Ride(models.Model):
    origin = models.CharField(max_length=100)
    destination = models.CharField(max_length=100)
    driver = models.ForeignKey(User, on_delete=models.CASCADE)
    datetime = models.DateTimeField()
    phone = models.CharField(max_length=20)
    seats = models.IntegerField()
    price = models.IntegerField(default=0)
    has_female_passenger = models.BooleanField(default=False)

    def __str__(self):
        return f'{self.origin} ‚Üí {self.destination}'

# üì¶ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
class Booking(models.Model):
    ride = models.ForeignKey(Ride, on_delete=models.CASCADE)
    passenger = models.ForeignKey(User, on_delete=models.CASCADE)
    status = models.CharField(
        max_length=20,
        choices=[
            ('pending', '–û–∂–∏–¥–∞–Ω–∏–µ'),
            ('confirmed', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
        ],
        default='pending'
    )

    def __str__(self):
        return f'{self.passenger.username} - {self.ride}'

# üí¨ –ß–∞—Ç –º–µ–∂–¥—É –¥–≤—É–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
class Chat(models.Model):
    participants = models.ManyToManyField(User)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Chat ID {self.id}"

# üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
class ChatMessage(models.Model):
    chat = models.ForeignKey(Chat, on_delete=models.CASCADE, related_name='messages', null=True)
    sender = models.ForeignKey(User, on_delete=models.CASCADE)
    message = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    is_read = models.BooleanField(default=False)

    def __str__(self):
        return f"From {self.sender.username}: {self.message[:20]}"
